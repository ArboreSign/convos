=head1 NAME

Convos::Guides::Development - Guide for developers

=head1 OVERVIEW

This guide is for people who want to hack on L<Convos>. You can also have a
look at L<http://thorsen.pm/perl/2015/08/31/convos-revamped.html> for more
details.

The complete manual for L<Convos> and its dependencies are available
from inside the application at L<http://localhost:3000/perldoc>.

=head1 TUTORIAL

It is helpful if you are familiar with L<git|http://git-scm.com>,
L<Mojolicious> and basic L<Perl|http://perl.org> tools, such as
L<prove|App::prove> and L<cpanm|https://cpanmin.us>.

You also need L<npm|https://www.npmjs.com/> to do L<http://riotjs.com>
development.

=head2 Getting the source code

The first step is to clone the repository. You can either do this directly
in L<github|https://github.com/Nordaaker/convos> or by running the command
below:

  $ git clone https://github.com/Nordaaker/convos.git

The command above will create a "convos" directory in the current working
directory. The following steps need to be run from the project root, meaning
inside the "convos" directory.

NOTE! The current development branch is "batcode":

  $ git checkout -b batcode origin/batcode

=head2 Installing dependencies

Once you have the source code you should install the dependencies:

  $ script/convos install --develop

C<--develop> will also install dependencies which is only required if you
want to make changes to the files in the C<assets/> directory.

Other dependencies (such as L<riot|http://riotjs.com/>) will be installed
automatically when you start making changes in the C<assets/> directory.

=head2 Installing an IRC daemon

It is highly suggested that you install an IRC daemon, since many networks
will ban you if you reconnect to often. Any IRC compatible server will work,
but L<http://www.ircd-hybrid.org> is a good alternative:

  $ sudo apt-get install ircd-hybrid # ubuntu
  $ brew install ircd-hybrid         # osx

Please ask in L<irc://chat.freenode.net/#convos> if you want to use a common
IRC server.

=head2 Starting the application

The basics of getting the application running is the command below:

  $ script/convos dev

The command above is the same as:

  $ MOJO_IRC_DEBUG=1 CONVOS_DEBUG=1 \
    morbo script/convos -w assets/riot -w assets/sass -w assets/js -w public/convos-api.json

L<MOJO_IRC_DEBUG|Mojo::IRC> will print IRC debug to STDERR and C<CONVOS_DEBUG>
will print L<Convos> debug to STDERR. The C<-w> switch is for watching
different files and directories for changes.

=head2 Directory structure

=over 2

=item * ./assets/

The "assets" directory contains all JavaScript and Sass files, which will
be used to generate the "public" files. The dialog is done with
L<https://github.com/jhthorsen/mojolicious-plugin-assetpack>.

The C<.tag> files require L<riot|http://riotjs.com> to be compiled into
JavaScript.

=item * ./cpanfile

The L<cpanfile> is used to document all the requirements, while the
"Makefile.PL" file is generated from the content of the L<cpanfile>.

=item * ./lib/

The "lib" directory contains all the Perl source code.

=item * ./node_modules

The C<node_modules> directory will be generated when installing modules
with the "npm" command. This directory is ignored by git.

=item * ./public

The public directory contains fonts and images  which can be downloaded through
the L<Convos> web server.

=item * ./script

The script directory contains the main application file ("convos") and
helper scripts. The important part here is that every file which has the
executable bit set will be part of the final CPAN distribution.

=item * ./t

This directory contains the test files for the Perl code.

TODO: Add JavaScript tests.

=item * ./vendor

This directory contains projects which is tracked by other git repositories.

TODO: Move this directory to "assets".

=back

=head2 Convos frontend

                  .------.
              ____| Core |
  .--------._/    '------'
  | Convos |
  '--------'    .-------------.
        \_______| Controllers |
                '-------------'

The frontend contains of a single template, embedded inside of C<Convos.pm>.
The rest of the frontend consist of a JavaScript application, powered by
L<http://riotjs.com>. This application gets its data from a L<Swagger2>
API with a thin logical layer inside the controllers
L<Convos::Controller::Connection>,
L<Convos::Controller::Dialog>,
L<Convos::Controller::Events>,
L<Convos::Controller::Notifications> and
L<Convos::Controller::User>.

=head2 Convos core

                .---------.
            ____| Backend |
  .------._/    '---------'
  | Core |
  '------'   .------.   .-------------.   .---------.
      \______| User |___| Connections |___| Dialogs |
             '------'   '-------------'   '---------'

L<Convos::Core> is the heart of L<Convos>. The core takes care of connections,
dialogs, can persist to a backend and provide hooks for plugins.

The design makes L<Convos> a multi-user application, that can persist to any
backend (memory, file storage, redis, ...) and connect to any chat server,
as well as keeping any number of dialogs active.

The way the "Backend" is hooked into the rest of the object graph is by
events. Any user, connection or dialog can emit new events that the
Backend can choose to persist to storage. The default backend is a
file-based backend, which enables Convos to be started without any additional
dependencies, except Perl and a couple of modules from CPAN.

=head2 Contribute

First you need to identify which part you want to contribute to. The current
"batcode" branch is starting to take form. The API is pretty usable and
tested, but the frontend is infant.

We welcome pull requests on L<github|https://github.com/Nordaaker/convos/pulls>.

=head2 Get in touch

We would love to hear from you!

Please contact us in the #convos IRC channel on chat.freenode.net or send us
a message on L<twitter|https://twitter.com/convosby>.

You can also send an email to C<jhthorsen@cpan.org> or C<marcus@nordaaker.com>.

=head1 TODO

Here is a list of features that need to be implemented before "batware" can
be tested.

=head2 Backends

=over 2

=item * File backend

L<Convos::Core::Backend::File> is starting to take form: It can log messages.

Need to also log join/parted/quit events.

Need to track notifications.

=item * Redis backend

Should to have a L<Mojo::Redis2> based backend, compatible with the old
database.

=back

=head2 Connections

=over 2

=item * IRC

Better tests.

Listen to more relevant IRC events.

Nickserv password.

On connect commands.

Server password.

=back

=head2 Frontends

=over 2

=item * Swagger based API

L<Convos::Guides::API> need to be reviewed.

=item * Websocket / event stream API

More events from L<Mojo::Core::Backend> need to be streamed to the frontend.

=item * Riot based user interface

Need to understand "day changed". Need to draw a line since last time you
looked at the dialog. Emit desktop notifications on mentions.

Implement "search/goto anything".

Display action/notice/privmsg differently.

Show notifications.

Show user list for a dialog and user count. (what about user modes?)

Sort dialogs by name/last used/...?

Add support for showing user defined avatar.

Add support for arrow up/down in "user input field" for historical commands.

Change appearance on small screens/phones.

Proper styling/embedding of "pastebin links".

Shortcuts for jumping between "user input" and "sidebars".

=back

=head2 Misc

=over 2

=item * Add support for embedded pastebin. (Triggered by multi line user input)

=item * Add support for file (image, text, ...) upload.

=item * Add support for emoji icons/selector, based on unicode.

=back

=head1 AUTHOR

Jan Henning Thorsen - C<jhthorsen@cpan.org>

=cut
