(function(){Vue.component("convos-connection-editor",{props:["user"],computed:{showNickField:function(){return this.selectedProtocol=="irc";}},data:function(){return{advanced:false,onConnectCommands:"",connection:null,deleted:false,errors:[],password:"",nick:"",selectedProtocol:"irc",server:"",tls:null,username:""};},watch:{"settings.main":function(v,o){this.errors=[];this.updateForm(this.user.getConnection(v.replace(/.*connection\//,"")));}},methods:{removeConnection:function(){var self=this;this.connection.remove(function(err){if(err)return self.errors=err;self.connection=null;self.deleted=true;self.settings.main="#connection";});},saveConnection:function(){var self=this;var connection=this.connection||new Convos.Connection({user:this.user});var userinfo=[this.username,this.password].join(":");var params=[];userinfo=userinfo.match(/[^:]/)?userinfo+"@":"";connection.user=this.user;connection.url=this.selectedProtocol+"://"+userinfo+this.server;connection.on_connect_commands=this.onConnectCommands.split(/\n/).map(function(str){return str.trim();});if(this.nick)params.push("nick="+this.nick);if(this.tls!==null)params.push("tls="+this.tls);if(params.length)connection.url+="?"+params.join("&");this.errors=[];connection.save(function(err){if(err)return self.errors=err;self.deleted=false;self.updateForm(this);if(self.settings.main.indexOf(this.connection_id)==-1)self.settings.main="#create-dialog";});},toggleAdvanced:function(e){this.advanced=!this.advanced;if(this.advanced){var $main=$(this.$el).closest("main");this.$nextTick(function(){$main.animate({scrollTop:$main.height()},"slow");});}},updateForm:function(connection){var url=connection?connection.url.parseUrl():null;this.connection=connection;this.onConnectCommands=connection?connection.on_connect_commands.join("\n"):"";this.password=url?url.query.password||"":"";this.nick=url?url.query.nick||"":"";this.server=url?url.hostPort:this.settings.default_server;this.selectedProtocol=url?url.scheme||"":this.selectedProtocol;this.tls=url?url.query.tls:null;this.username=url?url.query.username:"";this.advanced=this.username?true:false;}},ready:function(){this.updateForm(this.user.getConnection(this.settings.main.replace(/.*connection\//,"")));},template:"<form @submit.prevent autocomplete=\"off\" class=\"convos-connection-editor\">\n    <div class=\"row\">\n      <div class=\"col s12\">\n        <h4>{{connection ? &#39;Edit &quot;&#39; + connection.name + &#39;&quot;&#39; : &quot;Add connection&quot;}}</h4>\n        <p>\n          <template v-if=\"!user.connections.length\">\n            You need to add a connection before you can have a dialog.\n          </template>\n          <template v-if=\"user.connections.length\">\n            Click on the &quot;Advanced&quot; button for more settings. In most cases\n            they are not requried to start chatting.\n          </template>\n          <template v-if=\"!user.connections.length &amp;&amp; settings.default_server\">\n            We have filled in example values, but you can change them if you like.\n            In most cases, you can just hit &quot;Create&quot; in the bottom to get started.\n          </template>\n        </p>\n      </div>\n    </div>\n    <div class=\"row\">\n      <md-input :readonly=\"settings.forced_irc_server\" :value.sync=\"server\" cols=\"s8 m9\" focus=\"\">Server</md-input>\n      <md-select :value.sync=\"tls\" cols=\"s4 m3\" label=\"Secure connection\">\n        <md-option :selected=\"tls == null\" :value=\"null\">Autodetect</md-option>\n        <md-option :selected=\"tls == 0\" value=\"0\">No</md-option>\n        <md-option :selected=\"tls == 1\" value=\"1\">Yes</md-option>\n      </md-select>\n    </div>\n    <div class=\"row\" v-if=\"showNickField\">\n      <md-input :value.sync=\"nick\" placeholder=\"A nick can be generated for you\">Nick</md-input>\n    </div>\n    <template v-if=\"advanced\">\n      <div class=\"row\">\n        <md-input :value.sync=\"username\" cols=\"s6\">Username</md-input>\n        <md-input :value.sync=\"password\" cols=\"s6\" type=\"password\">Password</md-input>\n      </div>\n      <div class=\"row\">\n        <md-textarea :value.sync=\"onConnectCommands\">On Connect Commands (one per line)</md-textarea>\n      </div>\n    </template>\n    <div class=\"row\" v-if=\"errors.length\">\n      <div class=\"col s12\"><div class=\"alert\">{{errors[0].message}}</div></div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col s12\">\n        <a class=\"btn waves-effect waves-light\" v-if=\"!user.connections.length || !user.dialogs.length\" v-link.literal=\"#\">\n          <i class=\"material-icons left\">navigate_before</i>Back\n        </a>\n        <button @click=\"saveConnection\" class=\"btn waves-effect waves-light\">\n          {{connection &amp;&amp; !deleted ? &#39;Update&#39; : &#39;Create&#39;}} <i class=\"material-icons right\">save</i>\n        </button>\n        <button @click.prevent=\"toggleAdvanced()\" class=\"btn waves-effect waves-light\">\n          Advanced <i class=\"material-icons right\">{{advanced ? &quot;close&quot; : &quot;settings&quot;}}</i>\n        </button>\n        <a @click.prevent=\"removeConnection\" class=\"btn-delete\" href=\"#delete\" v-if=\"connection\">\n          <i class=\"material-icons\">delete</i>\n        </a>\n        <span v-if=\"connection &amp;&amp; connection.state == &#39;disconnected&#39;\">{{connection.message || &#39;Click &quot;update&quot; to connect.&#39;}}</span>\n      </div>\n    </div>\n  </form>\n"})})();