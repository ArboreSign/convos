<template class="vue-dialog-container">
  <header>
    <div class="actions" v-show="dialog.connection">
      <!-- a href="#search" data-hint="Search"><i class="material-icons">search</i></a -->
      <a href="#info" @click.prevent="getInfo" data-hint="Get information"><i class="material-icons">info_outline</i></a>
      <a href="#close" @click.prevent="closeDialog" data-hint="Close dialog"><i class="material-icons">close</i></a>
      <a href="#menu" @click.prevent="toggleMenu" data-hint="Show menu" class="btn-toggle-menu"><i class="material-icons">menu</i></a>
    </div>
    <div class="actions" v-show="!dialog.connection">
      <a href="#chat"><i class="material-icons">star_rate</i></a>
      <a href="#menu" @click.prevent="toggleMenu" data-hint="Show menu" class="btn-toggle-menu"><i class="material-icons">menu</i></a>
    </div>
    <h5 :data-hint="dialog.topic || 'No topic is set.'">{{dialog.name || 'Convos'}}</h5>
  </header>
  <main>
    <dialog-message :dialog="dialog" :msg="msg" :user="user" v-for="msg in dialog.messages"></dialog-message>
  </main>
  <user-input :participants="participants" :dialog="dialog" :user="user"></user-input>
</template>
<script type="vue/component">
module.exports = {
  props: ["dialog", "user"],
  data:  function() {
    return {
      atBottom:          true,
      atBottomThreshold: !!("ontouchstart" in window) ? 60 : 40,
      participants:      [],
      scrollElement:     null
    };
  },
  events: {
    loadOffScreen: function(html, id) {
      if (html.match(/^<a\s/)) return;
      var self   = this;
      var $html  = $(html);
      var $paste = $html.filter('.text-paste, .text-gist-github');
      var $a     = $('#' + id);

      $html.filter("img").add($html.find("img")).addClass("embed materialboxed");
      $a.parent().append($html).find(".materialboxed").materialbox();

      $html.find("img, iframe").each(function() {
        $(this).css("height", "1px").load(function() {
          if (self.atBottom) self.scrollToBottom(true);
          $(this).css("height", "auto");
        });
      });

      if ($paste.length) {
        var $view = $('<a href="#view" data-hint="View"><i class="material-icons">open_in_browser</i></a>');
        $paste.hide();
        $a.after($view.click(function(e) {
          e.preventDefault();
          self.$root.embedViewerElement = $paste[0];
          location.hash = "embed-viewer";
        }));
        self.materializeComponent();
      }
    }
  },
  methods: {
    closeDialog: function() {
      this.dialog.connection.send("/close " + this.dialog.name);
    },
    getInfo: function() {
      var self = this;
      self.dialog.participants(function(err, participants) {
        self.participants = participants;
        this.emit("message", {
          from:         this.connection.id,
          message:      err ? err[0].message : "",
          participants: err ? null : participants,
          type:         err ? "error" : "notice"
        });
      });
    },
    moveToBottomOnResize: function(e) {
      if (this._atBottomTid) return;
      var atBottom = this.atBottom;
      this._atBottomTid = setTimeout(function() {
        this.scrollToBottom(atBottom);
        this._atBottomTid = 0;
      }.bind(this),
        300
      );
    },
    onScroll: function() {
      var elem = this.scrollElement;
      this.atBottom = elem.scrollHeight < elem.offsetHeight + this.atBottomThreshold + elem.scrollTop;
      if (!elem.scrollTop) this.dialog.previousMessages();
    },
    scrollToBottom: function(force) {
      var elem = this.scrollElement;
      if (this.atBottom || force) {
        window.nextTick(function() {
          elem.scrollTop = elem.scrollHeight;
        });
      }
    },
    toggleMenu: function(e) {
      $("nav").show();
      window.nextTick(function() {
        $(document).one("click", function(e) {
          if (!$(e.target).closest("nav").length) e.preventDefault();
          $("nav").hide();
        });
      });
    }
  },
  ready: function() {
    this.scrollElement = $("main", this.$el)[0];
    this.scrollElement.addEventListener("scroll", this.onScroll);
    window.addEventListener("resize", this.moveToBottomOnResize);
    this.dialog.on("message", this.scrollToBottom);
    this.dialog.on("ready", this.scrollToBottom);
  },
  beforeDestroy: function() {
    window.removeEventListener("resize", this.moveToBottomOnResize);
    this.scrollElement.removeEventListener("scroll", this.onScroll);
  }
};
</script>
